name: CMake Build Matrix

on:
  push:

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: "Windows Latest MSVC"
            os: windows-latest
            cc: "cl"
            cxx: "cl"
            environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
            generators: "Visual Studio 17 2022"
            arch: "win64_msvc2019_64"
            host: "windows"
          - name: "Ubuntu Latest GCC"
            os: ubuntu-latest
            cc: "gcc"
            cxx: "g++"
            generators: "Ninja"
            arch: 'gcc_64'
            host: "linux"
          - name: "macOS Latest Clang"
            os: macos-latest
            cc: "clang"
            cxx: "clang++"
            generators: "Ninja"
            arch: 'clang_64'
            host: "mac"
          - name: "Wasm"
            os: ubuntu-latest
            cc: "em"
            cxx: "em++"
            generators: "Ninja"
            arch: 'wasm_singlethread'
            host: "linux"

    steps:
      - name: Install dependencies on windows
        if: startsWith(matrix.config.os, 'windows')
        run: |
          choco install ninja cmake
          ninja --version
          cmake --version

      - name: Install dependencies on ubuntu
        if: startsWith(matrix.config.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake
          ninja --version
          cmake --version
          gcc --version
          sudo apt-get install doxygen
          sudo apt-get install graphviz
          sudo apt-get install aspell

      - name: Install dependencies on macos
        if: startsWith(matrix.config.os, 'macos')
        run: |
          brew install cmake ninja
          ninja --version
          cmake --version

      - name: Install dependencies for wasm
        if: startsWith(matrix.config.arch, 'wasm')
        uses: mymindstorm/setup-emsdk@v14
        with:
            version: 3.1.37

      - name: Checkout
        uses: actions/checkout@v4
        with:
            submodules: true

      - name: Make WASM
        if: startsWith(matrix.config.arch, 'wasm')
        shell: bash
        run: |
            mkdir -p build
            pushd build
            emcmake cmake ../wasm/CMakeLists.txt
            emmake make

      - name: Configure
        if: '!startsWith(matrix.config.arch, ''wasm'')'
        shell: cmake -P {0}
        run: |
            file(TO_CMAKE_PATH "${{ github.workspace }}" WS_PATH)
            set(ENV{CC} ${{ matrix.config.cc }})
            set(ENV{CXX} ${{ matrix.config.cxx }})

            message("CMAKE_CURRENT_SOURCE_DIR: ${CMAKE_CURRENT_SOURCE_DIR}")
            message("CMAKE_CURRENT_LIST_DIR ${CMAKE_CURRENT_LIST_DIR}")


            if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
                execute_process(
                    COMMAND "${{ matrix.config.environment_script }}" && set
                    OUTPUT_FILE environment_script_output.txt
                )
                file(STRINGS environment_script_output.txt output_lines)
                foreach(line IN LISTS output_lines)
                    if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
                        set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
                    endif()
                endforeach()
            endif()

            execute_process(
                    COMMAND cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCI_ACTIONS=ON -G Ninja -DACTIONS=TRUE
                        RESULT_VARIABLE result
                    )

            if (NOT result EQUAL 0)
                message(FATAL_ERROR "Bad exit status ${result}")
            endif()

      - name: Build
        if: '!startsWith(matrix.config.arch, ''wasm'')'
        shell: cmake -P {0}
        run: |
          set(ENV{NINJA_STATUS} "[%f/%t %o/sec] ")

          if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
            file(STRINGS environment_script_output.txt output_lines)
            foreach(line IN LISTS output_lines)
              if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
                set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
              endif()
            endforeach()
          endif()

          execute_process(
            COMMAND cmake --build build --config Release
            RESULT_VARIABLE result
            OUTPUT_VARIABLE build_out
            ERROR_VARIABLE build_out
          )

          message("build out: ${build_out}")

          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status")
          endif()

      - name: Set env
        shell: bash
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Upload Docs
        if: startsWith(matrix.config.arch, 'gcc_64')
        uses: actions/upload-artifact@v4
        with:
          path: ./build/html
          name: "docs-${{ matrix.config.arch }}-${{  env.RELEASE_VERSION }}"  

      - name: Clean build
        shell: bash
        run: |
          find build -name CMakeFiles -type d -delete
          find build -name CMakeCache.txt -type f -delete
          find build -name *.cmake -type f -delete
          find build -name *.ninja_* -type f -delete
          find build -name build.ninja -type f -delete
          find build -name CMakeDoxy* -type f -delete
          rm -rf build/html
          rm -rf build/aspell
          rm -rf build/_deps
      
      - name: Make WASM
        if: startsWith(matrix.config.arch, 'wasm')
        shell: bash
        run: cp ./wasm/* ./build/


      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          path: ./build
          name: "Neuropia-${{ matrix.config.arch }}-${{  env.RELEASE_VERSION }}"
            
  release:
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    runs-on: ${{ matrix.config.os }}
    needs: build
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: "Windows Latest MSVC"
            os: windows-latest
            arch: "win64_msvc2019_64"
          - name: "Ubuntu Latest GCC"
            os: ubuntu-latest
            arch: 'gcc_64'
          - name: "macOS Latest Clang"
            os: macos-latest
            arch: 'clang_64'
          - name: "Wasm"
            os: ubuntu-latest
            arch: 'wasm_singlethread'


    steps:
      - name: Set env
        shell: bash
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      
      - name: Download a Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: "Neuropia-${{ matrix.config.arch }}-${{  env.RELEASE_VERSION }}"
      
      - name: Tar
        shell: bash
        run: |
          BALL="Neuropia-${{ matrix.config.arch }}-${{  env.RELEASE_VERSION }}.gz"
          tar -czvf $BALL --exclude=$BALL *     

      - name: Create Release
        uses: ncipollo/release-action@v1.12.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          allowUpdates: true
          artifactErrorsFailBuild: true
          artifacts: "*-${{  env.RELEASE_VERSION }}.gz"

  publish:
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    #name: ${{ matrix.config.name }}
    name: "Deploy"
    runs-on: ubuntu-latest
    needs: release
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}    

    strategy:
      fail-fast: false

          
    steps:
      - name: Set env
        shell: bash
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Download a Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: "docs-gcc_64-${{  env.RELEASE_VERSION }}"
          path: docs
      
            
      - name: Download a Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: "Neuropia-wasm_singlethread-${{  env.RELEASE_VERSION }}"
                    
      - name: Prepare pages
        shell: bash    
        run: |
          ls -l
          # the action seems to expect that content is extracted into _site folder (there is no docs)
          mkdir -p _site
          ls | grep -v _site | xargs mv -t _site
          ls -lR
      
      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
          
      - name: Deploy
        id: deployment
        uses: actions/deploy-pages@v4
